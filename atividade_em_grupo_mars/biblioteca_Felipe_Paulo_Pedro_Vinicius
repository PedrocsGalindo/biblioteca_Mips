.data

# NOMES DOS ARQUIVOS --------------------------------------------------------------------------------------- 
usersFile:  .asciiz "users.txt"
booksFile:  .asciiz "books.txt"

# MENSAGENS PADROES ----------------------------------------------------------------------------------------
msgMain: .asciiz "Bem vindo/a a livraria da Rural\n\nInforme sua matricula:\n\n"
msgMenu: .asciiz "1- Livros\n2- Usuarios"
msgMatriculaNaoEncontrada: .asciiz "Numero de matricula não encontrada, escreva novamente\n"
msgNameUser: .asciiz "Qual o nome do Estudante\n"
msgRegistrationCode: .asciiz "Qual o numero de matricula\n"
msgCourseUser: .asciiz "Qual o curso do Estudante\n"

# BUFFERS --------------------------------------------------------------------------------------------------
bufferUser:  .space 100    #verificar se esse numero não esta sendo mais que o suficiente (exagero)
bufferLinha: .space 40    #verificar se esse numero é o suficiente
bufferByte: .space 1
                       
backspace:  .byte 0x08    
space:      .byte 0x20   # espaço em branco 

.text
.globl main

main:
	li $s0, 0   		# indice do bufferUser
	li $s1, 0		# indice do bufferLinha
	
	#Mensagem de bem vindo e numero de matricua
	la $a2, msgMain
	jal showMsg
	
	li $v0, 11           # Syscall para imprimir caractere
	li $a0, '\n'         # Nova linha
	syscall
	
	la $a0, bufferUser         # parametros da função
	li $v0, 36       # Syscall para imprimir hexadecimal
	syscall          # Exibe o endereço
	
	li $v0, 11           # Syscall para imprimir caractere
	li $a0, '\n'         # Nova linha
	syscall
	
	jal creatUser
	jal cleardDisplay
	
	#Mensagem de menu
	la $a2, msgMenu
	jal showMsg
	
	#Resposta do Usuario
	jal inputUser
	
creatUser:
	addi $sp, $sp, -4   
	sw $ra, 0($sp)     	     # salvar referencia
	
	la $a0, bufferUser         # parametros da função	
	move $a1, $s0
	
	la $a2, msgNameUser
	jal showMsg
	jal inputUser
	jal commaInBuffer
	
	la $a2, msgRegistrationCode
	jal showMsg
	jal inputUser
	jal commaInBuffer
	
	la $a2, msgCourseUser
	jal showMsg
	jal inputUser
	
	move $s0, $a1		     #recupera o indice do buffer
	
	la $a0, usersFile
	la $a1, bufferUser
	move $a2, $s0
	
	jal saveData

	lw $ra, 0($sp)       	     # recupera referencia do chamdaor
	addi $sp, $sp, 4    
	
	la $a0, bufferUser	      #limpando o buffer
	move $a1, $s0
	jal clearBuffer
	li $s0, 0
	
	j return

commaInBuffer:
# apos o uso tem que atualizar o valor do indice do buffer
# Parametro
# $a0 -> buffer
# $a1 -> indice do buffer
	li $t1, 0x2C        	     # caracter da virgula
	add $t0, $a0, $a1
	sb $t1, 0($t0)      	     # virgula no buffer
	addi $a1, $a1, 1             # +1 indice bufferUser
	
saveData:
# Parametro 
# $a0 -> nome do arquivo 
# $a1 -> endereço da string -> $t0
# $a2 -> tamanho da string ->  $t1

	move $t0, $a1        #remediar a sobrescrita dos registradores
	move $t1, $a2 

	li $v0, 13           # abrir arquivo
	li $a1, 9            # append
	li $a2, 0            # permissoes 
	syscall
	move $s0, $v0        # descritor do arquivo

	# Escrita no arquivo
	li $v0, 15           # Código da syscall para escrita
	move $a0, $s0        # Descritor do arquivo
	move $a1, $t0        
	move $a2, $t1        
	syscall
	
	j closeFile

closeFile:
	li $v0, 16
	move $a0, $s0
	syscall
	j return

# FUNCOES SIMPLES MUITO USADAS --------------------------------------------------------------------------------------------------------------------
clearBuffer:
# apos o uso tem que zerar o valor do indice do buffer
# parametro
# $a0 -> buffer
# $a1 -> indice
	add $a0, $a0, $a1	    #endereço do ultimo elemento do buffer

	addi $sp, $sp, -4   
	sw $ra, 0($sp)     	     # salvar referencia
	
	jal loopClearBuffer
	
	lw $ra, 0($sp)       	     # recupera referencia
	addi $sp, $sp, 4    
	j return 
	
loopClearBuffer:
	li $t1, 0
	sb $t1, 0($a0) 	     # armazena 0 no buffer
	subi $a0, $a0, 1
	subi $a1, $a1, 1
	bgez $a1, return      	# enquanto índice >= 0
	
inputUser:
	li $t0, 0xFFFF0000         # endereço do keyboard status
	lw $t1, 0($t0)             # status do teclado, bit menos significativo = 0 -> sem caracter indisponivel
	andi $t1, $t1, 1           # operação AND para verificar o bit menos significativo
	beq $t1, $zero, inputUser     

	# le caractere do teclado
	li $t0, 0xFFFF0004         # endereço do keyboard data
	lw $t2, 0($t0)             # carrega o caracter
	li $t3, 0x0A 		   # Enter
	beq $t2, $t3, return
	sb $t2, bufferUser($s0)    # salva no buffer
	addi $s0, $s0, 1	   # +1 indice bufferUser
	j loopDisplay
	
showMsg:
# Parametro 
# $a2 -> mensagem
	lb $t0, 0($a2)		  #caractere
	beqz $t0, return	  #verifica se terminou
	li $t1, 0xFFFF0008        # endereço do display status
	j loopDisplaymsg    	  #loop escrita
	
loopDisplaymsg:
	lw $t2, 0($t1)           # status do display
	andi $t2, $t2, 1         
	beq $t2, $zero, loopDisplaymsg  # se ocupado, espera

	li $t1, 0xFFFF000C       # endereço do display data
	sw $t0, 0($t1)           # escreve

	addi $a2, $a2, 1  	 # próximo caractere
	j showMsg     

cleardDisplay:
	li $t3, 25       	 # linhas em branco (contador)
	j clearLoop
	

clearLoop:
	li $t1, 0xFFFF0008         # endereço do display status
	lw $t2, 0($t1)             # status do display
	andi $t2, $t2, 1
	beq $t2, $zero, clearLoop  # se ocupado, espera
	li $t1, 0xFFFF000C         # endereço do display data
	

	li $a0, 0x0A               # pula linha
	sw $a0, 0($t1)             # escreve
	subi $t3, $t3, 1           # -1 contador
	bgtz $t3, clearLoop        # Repete até o contador chegar a 0

 	jr $ra        

return:
	jr $ra
